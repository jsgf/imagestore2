Update:

RESTifying + Ajaxificating

- minimize the use of cookies
  - authentication to avoid browser authentication
  - preferred viewing size of images
- minimize session info
  - none?
- use HTTP Digest authentication
  - use cookies as well to avoid browser password UI?

Image view:

/COLLECTION/image/
	POST/PUT to add new image
	GET for list of images?

/COLLECTION/image/NNNN/
	GET to get original image

/COLLECTION/image/NNNN/meta
	GET metadata (JSON/XML/HTML)
	POST/PUT update metadata
/COLLECTION/image/NNNN/meta/META
	GET/POST/PUT a specific metadata item

/COLLECTION/image/NNNN/SIZE.FORMAT
	GET only: SIZE is "default"/"thumb"/"tiny"/"small"/"medium"/"large"/"full"/NxM
	    FORMAT is "html" (produce page), "jpg" jpeg version, mov/mpg
backwards compat:
redirect /COLLECTION/image/NNNN(-SIZE!?)?(.ext)? to new form URL

Basic ideas:

- archival system for photos, movies and other digital (or digitized) media
- base file, generated by the digitizing device, is never modified - treated as negative
  - may be dervied versions
- a photo or other recording is taken at a particular time in a particular place
  - nested map of (photographer/camera, time) -> place
  - display photos ordered by date by preference
  - multiple recordings from one event (eg, mpeg+still)
- maximize automatic extraction of metadata
  - use EXIF and other embedded metadata
  - time/place mapping
  - simplify addition of keywords to photos
  - automatic identification of photographer/rights holder/etc
- separate frontend and backend
  - commonly used via web interface
  - other more responsive UIs possible by sharing backend
  - RPC to hide underlying representation
- gallery arrangement/generation
  - secondary function
  - mostly functional with few frills
  - galleries the result of canned queries (even if the query just enumerates a list of photos)
  - either way, should be friendly to casual browsers
- access control
  - public/private
  - ACLs? groups?
- arrange photos into "collections"
  - multiple users/photo owners
- repeated importing without consequence
  - accumulate metadata?
- useful web interface
  - next/prev links
  - obvious, usable URLs for data (less important for images)
  - good-sized thumbnails
  - clean styling

URL layout:

/imagestore/
	<collection-name>/			# collection root
		image/
			NNNN(-SIZE!?)?.html	# generate a viewer page for the image
			NNNN(-SIZE!?)?(.ext)?	# generate an image data stream (ext ignored)			
		details/
			NNNN.html		# generate details display

		edit/
			multi.html		# edit multiple images
			NNNN/details		# edit details editor
			NNNN/rotate/ANGLE	# rotate image

		import/				# image importing

		admin/				# collection administration

		search/				# search interface

		calendar/			# time interface
			INTERVAL/DATE		# view for a particular day/week/month/year
			summary/DATE		# calendar summary

		keyword/			# keyword management
			edit/			# edit keywords
			graph/			# generate keyword relation graphs

	user/					# user settings
		prefs/				# preferences
		rss/				# personal rss feed

	admin/					# imagestore administration
		user/				# user summary
			NAME			# user editor

	rss/					# RSS feed

NNNN: image number
SIZE: thumb|tiny|small|medium|large|orig - trailing ! sets as default size
ANGLE: 0|90|180|270
INTERVAL: day|week|month|year
DATE: YYYY-MM-DD
DATERANGE: DATE:DATE | INTERVAL:DATE

Data design:

Table "Media"

Stores all the bulk data, away from any metadata to keep cache footprint small.

      INT	id				// unique media id (primary key)
      CHAR(40)	hash				// index
      INT	sequence			// which chunk in the data
      BLOB	data

Table "images"

Per-image info.  XXX Split this into base info and per-media metadata?

      INT	id				// unique image id (primary key)
      CHAR	mimetype

      INT	mediaid		= "media"	// media
      INT	thumbid		= "media"	// thumbnail
      INT	link		= "images"	// related images

      INT	owner		= "users"
      ENUM	visibility(public,private)

      INT	rating				// photo rating (-ve = junk)
      CHAR	title
      CHAR	summary
      CHAR	description

      INT	cameraid	= "cameras"	// what took the image?

      INT	orientation			// which way is up?

      TIMEDATE	record_time			// time image recorded
      TIMEDATE	modified_time			// entry modified

      // Still photo metadata
      BOOL	flash				// flash used?
      CHAR	fstop				// aperature
      FLOAT	exposure_time			// shutter time
      INT	exposure_bias
      INT	brightness
      INT	focal_length
      // in-camera processing?      

      // mpeg metadata

Table "keyindex"
      INT	keyid				// unused ID
      INT	imageid		= "images"	// image id
      INT	keywordid	= "keywords"	// word ID

Table "keywords"
      INT	keywordid			// primary key
      CHAR	word				// keyword

Table "cameras"
      INT	cameraid

      CHAR	nickname
      CHAR	manuf
      CHAR	model
      CHAR	serial
      CHAR	notes

      INT	owner		= "users"

Table "users"
      INT	userid

      CHAR	username	// = email address
      CHAR	password
      CHAR	fullname

      BOOL	admin
      BOOL	viewall
