# -*- python -*-

import imagestore
import imagestore.pages as page
import imagestore.style as style
import imagestore.ImageTransform as ImageTransform

sorted_sizes=ImageTransform.sizes.items()
sorted_sizes.sort(lambda a,b: cmp(a[1][0]*a[1][1], b[1][0]*b[1][1]))
sorted_sizes=[ a for (a,b) in sorted_sizes ]


def view [html] (self, request, p, size, default):
    import imagestore.image as image

    id = p.id
    if size is None:
        size = image.preferred_size(request)
    elif size == 'orig':
        return self.image_orig(request, p)
    elif default:
        image.set_preferred_size(request, size)

    (pw,ph) = ImageTransform.transformed_size(p, size)

    self.set_prevnext(request, id, size)
        
    for s in sorted_sizes:
        if ImageTransform.sizes[s][0]*ImageTransform.sizes[s][1] < (640*480):
            continue
        if s != 'full' and \
               ImageTransform.sizes[s][0] > p.width and \
               ImageTransform.sizes[s][1] > p.height:
            continue
        
        request.navigation.add_option(self.view_path(p, size=s, preferred=True),
                                      link=s.capitalize(),
                                      title='%dx%d' % ImageTransform.transformed_size(p, s),
                                      selected= s==size)

    if self.coll.mayViewOrig(request, p):
        request.navigation.add_option(self.view_path(p, size='orig'),
                                      link='Original',
                                      title='For printing')

    page.pre(request, 'View image %d' % id,
             bodyid='view', trail=False)

    request.navigation.render()
    
    # Try to resize the window to a useful inner size.
    # - do the simple thing
    # - see if it worked
    # - if not, try again
    #
    # XXX FIXME: apparently IE doesn't support innerWidth/Height,
    # and you have to use something else.  See
    # http://webfx.eae.net/dhtml/wincontrols/wincontrols.html
    """\
<script language="JavaScript"><!--
        window.resizeTo(%(w)d, %(h)d);
        bw = %(w)d - window.innerWidth;
        bh = %(h)d - window.innerHeight;
        if (bw != 0 || bh != 0) {
          window.resizeTo(%(w)d + bw, %(h)d + bh);
        }
--></script>\n""" % { 'w': pw+(2*style.view_margin), 'h': ph+(2*style.view_margin) }

    self.details_link(p, self.picture_img(p, size, default)) + '\n'

    page.post()

def generate_twu_map [html] (self, p):
    (w,h) = ImageTransform.thumb_size(p)
    
    """\
    <map name="map:%(id)d">
        <area href="%%(rot180)s" shape="circle" title="This way up" coords="%(midwidth)d,%(height)d,%(rad)d">
        <area href="%%(rot270)s" shape="circle" title="This way up" coords="0,%(midheight)d,%(rad)d">
        <area href="%%(rot90)s" shape="circle" title="This way up" coords="%(width)d,%(midwidth)d,%(rad)d">
        <area href="%(default)s" shape="default">
    </map>\n""" % {
            'id': p.id,
            'width': w-1,
            'height': h-1,
            'midwidth': w/2,
            'midheight': h/2,
            'rad': min(w,h)/3,
            'default': self.edit.path(p)
            }
    
def view_rotate_link [html] (self, request, p, size=None, extra=None, wantedit=False):
    if not (self.coll.mayEdit(request, p) and (wantedit or request.session.wantedit)):
        return self.view_newwin_link(request, p, size, extra=extra)

    url='%s#thumb:%d' % (request.get_url(), p.id)

    thsz = ImageTransform.thumb_size(p)

    extra = extra or {}
    extra[str('style')] = str('width:%dpx; height:%dpx;' % thsz)
    extra[str('class')] = str(' thumb')

    if style.table_twu:
        # Table version should work everywhere
        twu = """\
        <table class="thiswayup" style="width:%(tablewidth)dpx; height:%(tableheight)dpx;" cellspacing=0 cellpadding=0 border=0>
        <tr><td colspan=3 class="top" align="center" valign="bottom">%(up)s</td></tr>
        <tr>
          <td valign="center" align="right"><a title="This way up" class="left-arrow" href="%(rot270)s">%(left)s</a></td>
          <td>%(thumb)s</td>
          <td valign="center" align="left"><a title="This way up" class="right-arrow" href="%(rot90)s">%(right)s</a></td>
        </tr>
        <tr><td colspan=3 class="bottom" align="center" valign="top"><a title="This way up" class="down-arrow" href="%(rot180)s">%(down)s</a></td></tr>
        </table>\n"""
    else:
        # Non-table version seems pretty problematic
        twu = """\
        <div class="thiswayup" style="width:%(totwidth)dpx; height:%(totheight)dpx;">
          %(thumb)s
          %(up)s
          <a title="This way up" class="down-arrow" href="%(rot180)s">%(down)s</a>
          <a title="This way up" class="left-arrow" href="%(rot270)s">%(left)s</a>
          <a title="This way up" class="right-arrow" href="%(rot90)s">%(right)s</a>
        </div>"""

    twu = twu + generate_twu_map(self, p)

    user = request.session.getuser()
    link = self.thumb_img(p=p, showvis=(user and p.ownerID == user.id),
                          extra={ 'ismap': None, 'usemap': '#map:%d' % p.id })

    print twu
    twu % {
        'rot0':   self.rotate_path(p, (  0 + p.orientation) % 360, url),
        'rot90':  self.rotate_path(p, ( 90 + p.orientation) % 360, url),
        'rot180': self.rotate_path(p, (180 + p.orientation) % 360, url),
        'rot270': self.rotate_path(p, (270 + p.orientation) % 360, url),

        'thumb':  link,

        'up':     page.arrow('up', extra={'title': 'Up is up'}),
        'down':   page.arrow('down'),
        'left':   page.arrow('left'),
        'right':  page.arrow('right'),
        
        'totwidth': thsz[0] + (2*style.thiswayup_img_padding),
        'totheight': thsz[1] + (2*style.thiswayup_img_padding),

        'tablewidth': thsz[0] + (2*style.arrow_height),
        'tableheight': thsz[1] + (2*style.arrow_height),
        }

def detail_table [html] (p):
    camera = p.camera
    """
    <table class="detail_tab">
      <tr><td class="name">Create date</td><td class="val">%(create_time)s</td></tr>
      <tr><td class="name">Exposure time</td><td class="val">%(shutter)s</td></tr>
      <tr><td class="name">F-Number</td><td class="val">%(fnumber)s</td></tr>
      <tr><td class="name">Program-mode</td><td class="val">%(program)s</td></tr>
      <tr><td class="name">Exposure bias</td><td class="val">%(exp_bias)s EV</td></tr>
      <tr><td class="name">Focal length</td><td class="val">%(focal)d mm</td></tr>
      <tr><td class="name">Dimensions</td><td class="val">%(width)dx%(height)d</td></tr>
      <tr><td class="name">Camera</td><td class="val">%(camera)s</td></tr>
    </table>\n""" % {
        'create_time':      p.record_time.strftime(str('%Y-%m-%d %H:%M')),
        'shutter':          p.exposure_time,
        'fnumber':          p.f_number,
        'exp_bias':         p.exposure_bias,
        'focal':            p.focal_length,
        'width':            p.width,
        'height':           p.height,
        'program':          p.exposure_program,

        'camera':           camera and ('%d: %s %s' % (camera.id,
                                                       camera.manufacturer,
                                                       camera.model)) or '?',
        }
    
def details [html] (self, request, p):
    page.pre(request, 'Details for picture %d' % p.id, 'details', trail=False)

    title = p.title or ''

    camera = p.camera

    '<span class="detail-thumb">\n'
    self.image.view_rotate_link(request, p) + '\n'
    '</span>\n'

    detail_table(p)

    """
    <dl>
    <dt class="name">Title:</dt><dd class="val title">%(title)s</dd>
    <dt class="name">Description:</dt><dd class="val description">%(description)s</dd>
    <dt class="name">Owner:</dt><dd class="val owner">%(owner)s %(email)s</dd>
    <dt class="name">Keywords:</dt><dd class="val keywords">%(keywords)s</dd>
    </dl>
    """ % {

        'owner':            p.owner.fullname,
        'email':            str('<%s>' % p.owner.email),
        
        'keywords':         ', '.join([ k.word for k in p.keywords]),
        'title':            title,
        'description':      p.description,
        }

    user = request.session.getuser()
    if user and p.mayEdit(user):
        '<a href="%s/%s/image/edit/%d.html">Edit</a>' % (imagestore.path(), self.coll.dbobj.name,
                                                         p.id)

    page.post()

