# -*- python -*-

import quixote

import imagestore
import imagestore.pages as page
import imagestore.style as style
import imagestore.ImageTransform as ImageTransform
import imagestore.auth as auth

sorted_sizes=ImageTransform.sizes.items()
sorted_sizes.sort(lambda a,b: cmp(a[1][0]*a[1][1], b[1][0]*b[1][1]))
sorted_sizes=[ a for (a,b) in sorted_sizes ]

class DetailsUI:
    " class for /COLLECTION/image/NNNN/details "
    _q_exports = []
    
    def __init__(self, image):
        self.collection = image.collection
        self.image = image

    def path(self, p):
        return '%sdetails' % self.image.path()

    def _q_index [html] (self, request):
        p = self.image.pic()

        page.pre(request, 'Details for picture %d' % p.id, 'details', trail=False)

        title = p.title or ''

        camera = p.camera

        '<span class="detail-thumb">\n'
        self.image.view_rotate_link(request, p) + '\n'
        '</span>\n'

        detail_table(p)

        """
        <dl>
        <dt class="name">Title:</dt><dd class="val title">%(title)s</dd>
        <dt class="name">Description:</dt><dd class="val description">%(description)s</dd>
        <dt class="name">Owner:</dt><dd class="val owner">%(owner)s %(email)s</dd>
        <dt class="name">Keywords:</dt><dd class="val keywords">%(keywords)s</dd>
        </dl>
        """ % {

            'owner':            p.owner.fullname,
            'email':            str('<%s>' % p.owner.email),

            'keywords':         ', '.join([ k.word for k in p.keywords]),
            'title':            title,
            'description':      p.description,
            }

        user = request.session.getuser()
        if user and p.mayEdit(user):
            '<a href="%s">Edit</a>' % self.image.edit.path(p)

        page.post()

class ImageUI:
    """ Generate bits of HTML UI relating to images """
    def __init__(self, image):
        self.image = image

    def thumbnail [html] (self, link=None, wantedit=False, linkextra=None):
        #""" Generate a thumbnail with all the trimmings. """

        if link is None:
            link = self.view_path()

        if linkextra is None:
            linkextra = {}

        user = auth.login_user(quiet=True)
        p = self.image.pic()
        
        (tw,th) = ImageTransform.thumb_size(p)
        mayedit = ''
        if wantedit and self.image.collection.mayEdit(p, quiet=True):
            mayedit = 'mayedit'

        thumb = """
            <div id="%(id)s" class="thumbnail %(mayedit)s">
              <img alt="%(title)s" src="%(img)s"
                style="width:%(th-width)dpx;height:%(th-height)dpx;left:%(pos-x)dpx;top:%(pos-y)dpx;">
              <div title="%(title)s" class="ui"
                onmouseover="dojo.html.addClass(this, 'hover');"
                onmouseout="dojo.html.removeClass(this, 'hover');">
                <a class="view" href="%(link)s" %(linkextra)s><i class="hide">view larger</i></a>
                <div class="need-auth visibility %(visibility)s"><a href="setvis"><i class="hide">setvis</i></a></div>
                <a class="need-auth arrow right" href="%(rot90)s"><i class="hide">rightisup</i></a>
                <a class="need-auth arrow down" href="%(rot180)s"><i class="hide">downisup</i></a>
                <a class="need-auth arrow left" href="%(rot270)s"><i class="hide">leftisup</i></a>
              </div>
            </div>\n"""

        thumb % {
            'id':       'pic%d' % p.id,
            
            'rot90':    self.image.rotate_path(( 90 + p.orientation) % 360),
            'rot180':   self.image.rotate_path((180 + p.orientation) % 360),
            'rot270':   self.image.rotate_path((270 + p.orientation) % 360),

            'title':    p.title or 'Image %d' % p.id,

            'img':      self.image.thumb_path(),
            'link':     link,
            'linkextra':page.join_extra(linkextra),
            'th-width': tw,
            'th-height':th,
            'pos-x':    (style.thumb_size - tw) / 2,
            'pos-y':    (style.thumb_size - th) / 2,
            
            'visibility': p.visibility,

            'mayedit':  mayedit,
            }
        
    def view_path(self, size='default'):
        return self.image.path() + size + '.html'
    
    def view [html] (self, size):
        request = quixote.get_request()
        p = self.image.pic()
        
        id = p.id
        if size is None or size == 'default':
            size = imagestore.prefs.image_size
        elif size == 'orig':
            return self.image.download()
            
        (pw,ph) = ImageTransform.transformed_size(p, size)

        #self.set_prevnext(request, id, size)

        for s in sorted_sizes:
            if ImageTransform.sizes[s][0]*ImageTransform.sizes[s][1] < (640*480):
                continue
            if s != 'full' and \
                   ImageTransform.sizes[s][0] > p.width and \
                   ImageTransform.sizes[s][1] > p.height:
                continue

            request.navigation.add_option(self.view_path(s),
                                          link=s.capitalize(),
                                          title='%dx%d' % ImageTransform.transformed_size(p, s),
                                          selected=(s==size),
                                          extra={ 'onclick': imagestore.prefs.set_client('image_size', s) })

        if self.image.collection.mayViewOrig(p, quiet=True):
            request.navigation.add_option(self.image.download_path(),
                                          link='Download original',
                                          title='For printing')

        page.pre(request, 'View image %d' % id,
                 bodyid='view', trail=False)

        request.navigation.render()

        # Try to resize the window to a useful inner size.
        # - do the simple thing
        # - see if it worked
        # - if not, try again
        #
        # XXX FIXME: apparently IE doesn't support innerWidth/Height,
        # and you have to use something else.  See
        # http://webfx.eae.net/dhtml/wincontrols/wincontrols.html

        if imagestore.prefs.resize_view:
            """\
    <script language="JavaScript"><!--
        size_window(window, %(w)d,%(h)h);
    --></script>\n""" % { 'w': pw+(2*style.view_margin), 'h': ph+(2*style.view_margin) }


        """
        <object style="width:%(width)dpx;height:%(height)dpx" type="%(mimetype)s" data="%(img)s" class="picture">
          <img style="width:%(width)dpx;height:%(height)dpx" src="%(img)s" class="picture">
        </object>\n""" % {
              'width':          pw,
              'height':         ph,
              'mimetype':       p.mimetype,
              'img':            self.image.image_path(size),
              }

        '<a class="image-link" href="%s">Image link</a>' % self.image.image_path(size)
        page.post()

                

def detail_table [html] (p):
    camera = p.camera
    """
    <table class="detail_tab">
      <tr><td class="name">Create date</td><td class="val">%(create_time)s</td></tr>
      <tr><td class="name">Exposure time</td><td class="val">%(shutter)s</td></tr>
      <tr><td class="name">F-Number</td><td class="val">%(fnumber)s</td></tr>
      <tr><td class="name">Program-mode</td><td class="val">%(program)s</td></tr>
      <tr><td class="name">Exposure bias</td><td class="val">%(exp_bias)s EV</td></tr>
      <tr><td class="name">Focal length</td><td class="val">%(focal)d mm</td></tr>
      <tr><td class="name">Dimensions</td><td class="val">%(width)dx%(height)d</td></tr>
      <tr><td class="name">Camera</td><td class="val">%(camera)s</td></tr>
    </table>\n""" % {
        'create_time':      p.record_time.strftime(str('%Y-%m-%d %H:%M')),
        'shutter':          p.exposure_time,
        'fnumber':          p.f_number,
        'exp_bias':         p.exposure_bias,
        'focal':            p.focal_length,
        'width':            p.width,
        'height':           p.height,
        'program':          p.exposure_program,

        'camera':           camera and ('%d: %s %s' % (camera.id,
                                                       camera.manufacturer,
                                                       camera.model)) or '?',
        }
