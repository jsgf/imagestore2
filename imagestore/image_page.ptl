# -*- python -*-

from imagestore.image import preferred_size, set_preferred_size
from ImageTransform import transformed_size, sizes
from pages import pre, post, join_extra, arrow
from go_scgi import ImagestoreHandler
prefix = ImagestoreHandler.prefix
from db import Picture

view_margin=15

sorted_sizes=sizes.items()
sorted_sizes.sort(lambda a,b: cmp(a[1][0]*a[1][1], b[1][0]*b[1][1]))
sorted_sizes=[ a for (a,b) in sorted_sizes ]



def view [html] (self, request, p, size, default):
    id = p.id
    pre('View image %d' % id,
        bodyclass='view')
    
    if size is None:
        size = preferred_size(request)
    elif size == 'orig':
        return self.image_orig(request, p)
    elif default:
        set_preferred_size(request, size)

    (pw,ph) = transformed_size(id, size)

    """\
<script language="JavaScript"><!--
        window.resizeTo(%(w)d, %(h)d)
--></script>\n""" % { 'w': pw+(2*view_margin), 'h': ph+(2*view_margin) }

    '<div class="nav">\n'

    (prev,next) = request.session.get_results_neighbours(id)

    if prev is not None:
        prev = Picture.get(prev)
        self.view_link(request, prev, size, arrow('left')+'&nbsp;Prev',
                       extra={'title': 'Image %d' % prev.id,
                              'class': 'prev'}) + '\n'
        
    '<span class="size">\n'

    for s in sorted_sizes:
        if sizes[s][0]*sizes[s][1] < (640*480):
            continue
        if s != 'full' and sizes[s][0] > p.width and sizes[s][1] > p.height:
            continue
        
        sel=''
        if s == size:
            sel='selected'
        self.view_link(request, p=p, size=s, link=s.capitalize(), preferred=True,
                       extra={'title': '%dx%d' % transformed_size(id, s),
                              'class': sel}) + '\n'
    if self.coll.mayViewOrig(request, p):
        self.view_link(request, p, 'orig', 'Original',
                       extra={'title': 'For printing'}) + '\n'

    '</span>\n'

    if next is not None:
        next = Picture.get(next)
        self.view_link(request, next, size, 'Next&nbsp;'+arrow('right'),
                       extra={'title': 'Image %d' % next.id,
                              'class': 'next'}) + '\n'

    '</div>\n'

    self.details_link(p, self.picture_img(p, size, default)) + '\n'

    post()

def view_rotate_link [html] (self, request, p, size=None, extra={}):
    if not self.coll.mayEdit(request, p):
        return self.view_link(request, p, size, extra=extra)

    url='%s#thumb:%d' % (request.get_url(), p.id)

    """
    <table class="thiswayup">
    <tr><td colspan="3" align="center">%(up)s</td></tr>
    <tr>
    <td><a title="This way up" href="%(rot270)s">%(left)s</a></td>
    <td>%(thumb)s</td>
    <td><a title="This way up" href="%(rot90)s">%(right)s</a></td>
    <tr>
    <tr><td colspan="3" align="center"><a title="This way up" href="%(rot180)s">%(down)s</a></td></tr>
    </table>""" % {
        'rot0':   self.rotate_url(p, (  0 + p.orientation) % 360, url),
        'rot90':  self.rotate_url(p, ( 90 + p.orientation) % 360, url),
        'rot180': self.rotate_url(p, (180 + p.orientation) % 360, url),
        'rot270': self.rotate_url(p, (270 + p.orientation) % 360, url),
        'thumb':  self.view_newwin_link(request, p, size, extra=extra),
        'up':     arrow('up', extra={'title': 'Up is up'}),
        'down':   arrow('down'),
        'left':   arrow('left'),
        'right':  arrow('right'),
        }



def details [html] (self, request, p):
    pre('Details for picture %d' % p.id, 'details')

    title = p.title
    if title is None:
        title = ''

    '<span class="detail-thumb">\n'
    self.image.view_rotate_link(request, p) + '\n'
    '</span>\n'

    """
    <table class="detail_tab">
    <tr><td class="name">Create date</td><td class="val">%(create_time)s</td></tr>
    <tr><td class="name">Exposure time</td><td class="val">%(shutter)s</td></tr>
    <tr><td class="name">F-Number</td><td class="val">%(fnumber)s</td></tr>
    <tr><td class="name">Program-mode</td><td class="val">%(program)s</td></tr>
    <tr><td class="name">Exposure bias</td><td class="val">%(exp_bias)s EV</td></tr>
    <tr><td class="name">Focal length</td><td class="val">%(focal)d mm</td></tr>
    <tr><td class="name">Dimensions</td><td class="val">%(width)dx%(height)d</td></tr>
    </table>
    
    <dl>
    <dt class="name">Title:</dt><dd class="val title">%(title)s</dd>
    <dt class="name">Description:</dt><dd class="val description">%(description)s</dd>
    <dt class="name">Owner:</dt><dd class="val owner">%(owner)s %(email)s</dd>
    <dt class="name">Keywords:</dt><dd class="val keywords">%(keywords)s</dd>
    </dl>
    """ % {
        'create_time':      p.record_time.strftime(str('%Y-%m-%d %H:%M')),
        'shutter':          p.exposure_time,
        'fnumber':          p.f_number,
        'exp_bias':         p.exposure_bias,
        'focal':            p.focal_length,
        'width':            p.width,
        'height':           p.height,
        'program':          p.exposure_program,

        'owner':            p.owner.fullname,
        'email':            str('<%s>' % p.owner.email),
        
        'keywords':         ', '.join([ k.word for k in p.keywords]),
        'title':            title,
        'description':      p.description,
        }

    post()
