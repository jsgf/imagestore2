# -*- python -*-

from mx.DateTime import DateTime, RelativeDateTime
from pages import pre, post, menupane, error, arrow
from db import Picture
from dbfilters import mayViewFilter
from sqlobject.sqlbuilder import AND
from image import ImageUI

def plural(n, s):
    return '%d %s%s' % (n, s, ['', 's'][n!=1])

def most_recent():
    return Picture.select(orderBy=Picture.q.record_time).reversed()[0]

def prevlink [html] (url):
    '<div class="nav nav-prev"><a href="%s">%s&nbsp;Prev</a></div>' % (url, arrow('left'))

def nextlink [html] (url):
    '<div class="nav nav-next"><a href="%s">Next&nbsp;%s</a></div>' % (url, arrow('right'))

def _q_index_ptl [html] (self, request):
    from calendarui import sorted_intervals, int_day, int_week

    if self.date is None:
        self.date = self.interval.rounddown(most_recent().record_time)

    filter = mayViewFilter(self.collection.dbobj, request.session.getuser())
    
    days = self.build_calendar(self.date, self.interval, filter=filter)

    total = reduce(lambda a,b:a+b, [0,0]+[ p.count() for (d,p) in days ])

    pre(request, 'Calendar: %s - %s' % (self.interval.long_fmt(self.date),
                                        plural(total, 'picture')),
        'calendar')

    '<h1>%s - %s</h1>' % (self.interval.long_fmt(self.date), plural(total, 'picture'))

    if days is None or len(days) == 0:
            error(request, 'No pictures in specified range', 'Please select another date range')

    nav = ''
    prev = Picture.select(AND(Picture.q.record_time < self.date, filter),
                          orderBy=Picture.q.record_time).reversed()
    if prev.count() > 0:
        prev = self.interval.rounddown(prev[0].record_time)
        nav += prevlink(self.calendar_url(self.interval, prev))

    next = Picture.select(AND(Picture.q.record_time >= (self.date+self.interval.step), filter),
                          orderBy=Picture.q.record_time)
    if next.count() > 0:
        next = self.interval.rounddown(next[0].record_time)
        nav += nextlink(self.calendar_url(self.interval, next))

    menupane(request, extra=self.menupane_extra(), nav=nav)

    for i in sorted_intervals:
        sel=''
        if i == self.interval:
            sel='selected'
        '<a class="%s" href="%s">%s</a>\n' % (sel, self.calendar_url(i, self.date),
                                              i.name.capitalize())


    results=[]
    idx = 0

    for d,pl in days:
        '<div class="day">\n'
        '<div class="day-link" id="day:%(date)s"><a href="%(url)s">%(date)s</a></div>\n' % {
            'url': self.calendar_url(int_day, d),
            'date': d.strftime(str('%Y-%m-%d'))
            }
        '<div class="day-pics">\n'
        for p in pl:
            results.append(p.id)
            ImageUI(self.collection).view_rotate_link(request, p) + '\n'
            idx+=1
        '</div></div>\n'

    request.session.set_query_results(results)

    post()


def emitmonth [html](request, calui, year, m):
    from calendarui import int_month, int_day

    title = plural(m.total, 'picture')
    
    '\n<table class="month">\n'
    '  <thead>\n'
    '    <tr><td colspan="7"><a title="%s" href="%s">%s</a></td></tr>\n' % \
      (title, calui.calendar_url(int_month, DateTime(year, m.month)), m.getname())
    '  </thead>\n'
    '  <tbody>\n'
    mc = m.getcalendar()

    if False:
        # If we're making a 6-row month, fold the last row into the first
        # User testing (ie, Rachel) says no
        if len(mc) == 6:
            mm=[]
            for m1,m2 in zip(mc[0], mc[5]):
                mm.append(m1 or m2)
            mc[0] = mm
            del mc[5]

    for week in mc:
        '    <tr>'
        for d in week:
            if d == 0:
                '<td></td>'
                continue
            mark =  m.ismarked(d)
            if mark != 0:
                title = plural(mark, 'picture')
                '<td class="mark"><a href="%s" title="%s">%d</a></td>' % \
                     (calui.calendar_url(int_day, DateTime(year, m.month, d)), title, d)
            else:
                '<td>%d</td>' % d
        '</tr>\n'
    '  </tbody>\n'
    '</table>\n'

# Class of calendarui.Year
def formatyear [html] (self, request, year):
    from calendarui import pics_grouped, int_year, kw_summary

    filter = mayViewFilter(self.calui.collection.dbobj, request.session.getuser())

    pics = pics_grouped(int_year, round=True, filter=filter)

    total = 0
    for d,c in pics:
        if d.year == self.year:
            total = c.count()

    total = plural(total, 'picture')

    pre(request, "Year %d: %s" % (self.year, total), 'calendar')

    '<h1>Year: %d - %s</h1>\n' % (self.year, total)

    prev = None
    next = None

    '<div class="years">\n'
    for d,c in pics:
        if d.year < self.year:
            prev = d
        if next is None and d.year > self.year:
            next = d

        selected=''
        if d.year == self.year:
            selected='selected'

        title = plural(c.count(), 'picture')
        
        '  <a class="%s" title="%s" href="%s">%d</a>\n' % \
          (selected, title,
           self.calui.calendar_url(int_year, d), d.year)
        
    '</div>\n'
    
    nav = ''
    if prev is not None:
        nav += prevlink(self.calui.calendar_url(int_year, prev))
    if next is not None:
        nav += nextlink(self.calui.calendar_url(int_year, next))

    menupane(request, extra=self.calui.menupane_extra(), nav=nav)
    
    '<table class="calendar-year">\n'

    ya = [ [ None ] * 3,
           [ None ] * 3,
           [ None ] * 3,
           [ None ] * 3 ]

    for m in year:
        mi = m.month - 1
        ya[mi / 3][mi % 3] = m

    for row in ya:
        '<tr>\n'
        for m in row:
            ' <td>'
            if m is not None:
                emitmonth(request, self.calui, self.year, m)
            '</td>\n'
        '</tr>\n'
        
    '</table>'

    post()
