# -*- python -*-

from mx.DateTime import DateTime, RelativeDateTime
from pages import pre, post, menupane, error, arrow
from db import Picture
from image import ImageUI

def most_recent():
    return Picture.select(orderBy=Picture.q.record_time).reversed()[0]

def prevlink [html] (url):
    '<div class="nav nav-prev"><a href="%s">%s&nbsp;Prev</a></div>' % (url, arrow('left'))

def nextlink [html] (url):
    '<div class="nav nav-next"><a href="%s">Next&nbsp;%s</a></div>' % (url, arrow('right'))

def _q_index_ptl [html] (self, request):
    pre(request, 'Calendar view', 'calendar')

    from calendarui import intervals, sorted_intervals

    if self.interval is None:
        self.interval = 'week'
    
    if self.date is None:
        self.date = intervals[self.interval].rounddown(most_recent().record_time)

    interval = intervals[self.interval]
    
    days = self.build_calendar(self.date, interval)

    if days is None or len(days) == 0:
            error(request, 'No images in specified range', 'Please select another date range')

    nav = ''
    prev = Picture.select(Picture.q.record_time < self.date,
                          orderBy=Picture.q.record_time).reversed()
    if prev.count() > 0:
        prev = interval.rounddown(prev[0].record_time - interval.step)
        nav += prevlink(self.calendar_url(self.interval, prev))

    next = Picture.select(Picture.q.record_time >= (self.date+interval.step),
                          orderBy=Picture.q.record_time)
    if next.count() > 0:
        next = interval.rounddown(next[0].record_time)
        nav += nextlink(self.calendar_url(self.interval, next))

    menupane(request, extra=self.menupane_extra(), nav=nav)
    

    for i in sorted_intervals:
        sel=''
        if i.name == self.interval:
            sel='selected'
        '<a class="%s" href="%s">%s</a>\n' % (sel, self.calendar_url(i.name, self.date),
                                              i.name.capitalize())


    results=[]
    idx = 0

    for d,pl in days:
        '<div class="day">\n'
        '<div class="day-link" id="day:%(date)s"><a href="%(url)s">%(date)s</a></div>\n' % {
            'url': self.calendar_url('day', d),
            'date': d.strftime(str('%Y-%m-%d'))
            }
        '<div class="day-pics">\n'
        for p in pl:
            results.append(p.id)
            ImageUI(self.collection).view_rotate_link(request, p) + '\n'
            idx+=1
        '</div></div>\n'

    request.session.set_query_results(results)

    post()


# Class of calendarui.Year
def formatyear [html] (self, request, year):
    from calendarui import pics_grouped, int_year

    pre(request, "Year %d" % self.year, 'calendar')

    '<h1>Year %d</h1>\n' % self.year

    round = RelativeDateTime(month=1,day=1,hour=0,minute=0,second=0)
    prev = None
    next = None

    '<div class="years">\n'
    for d,c in pics_grouped(int_year, round=True):
        if d.year < self.year:
            prev = d
        if next is None and d.year > self.year:
            next = d

        selected=''
        if d.year == self.year:
            selected='selected'
        '  <a class="%s" title="%d images" href="%s">%d</a>\n' % \
          (selected, c.count(), self.calui.calendar_url('year', d), d.year)
        
    '</div>\n'
    
    nav = ''
    if prev is not None:
        nav += prevlink(self.calui.calendar_url('year', prev))
    if next is not None:
        nav += nextlink(self.calui.calendar_url('year', next))

    menupane(request, extra=self.calui.menupane_extra(), nav=nav)
    
    '<div class="calendar-year">\n'
    for m in year:
        '<table class="month">\n'
        '  <thead>\n'
        '    <tr><td colspan="7"><a href="%s">%s</a></td></tr>\n' % \
          (self.calui.calendar_url('month', DateTime(self.year, m.month)), m.getname())
        '  </thead>\n'
        '  <tbody>\n'
        mc = m.getcalendar()

        if False:
            # If we're making a 6-row month, fold the last row into the first
            # User testing (ie, Rachel) says no
            if len(mc) == 6:
                mm=[]
                for m1,m2 in zip(mc[0], mc[5]):
                    mm.append(m1 or m2)
                mc[0] = mm
                del mc[5]

        for week in mc:
            '    <tr>'
            for d in week:
                if d == 0:
                    '<td></td>'
                    continue
                mark =  m.ismarked(d)
                if mark != 0:
                    title = '%d image' % mark
                    if mark != 1:
                        title += 's'
                    '<td class="mark"><a href="%s" title="%s">%d</a></td>' % (self.calui.calendar_url('day', DateTime(self.year, m.month, d)), title, d)
                else:
                    '<td>%d</td>' % d
            '</tr>\n'
        '  </tbody>\n'
        '</table>\n'
    '</div>'

    post()
