# -*- python -*-

import mx.DateTime as mxdt

from quixote.html import htmltext as H, TemplateIO

from sqlobject.sqlbuilder import AND

import imagestore.db as db
import imagestore.calendarui
import imagestore.pages as page
import imagestore.dbfilters as dbfilters
import imagestore.image as image

def freqlist(list):
    " Take a list of items, and return a list of unique (item, count) tuples. "
    list.sort()
    item=None
    count=0

    ret=[]
    for i in list:
        if i != item:
            if item is not None and count:
                ret.append((item, count))
            item = i
            count = 0
        count += 1
    if item is not None and count:
        ret.append((item, count))

    ret.sort(lambda a,b: cmp(b[1],a[1]))

    return ret    

def picsbyday [html] (request, days, collection):
    from calendarui import int_day

    # Days is list of (date, piclist) tuples.  This routine displays
    # them grouped by day, along with a summary of the keywords used
    # for that day's pictures.
    maxkw = 10

    for d,pl in days:
        keywords = freqlist([ k.word for p in pl for k in p.keywords if k.word != 'unclassified' ])
        ellip = len(keywords) > maxkw
        keywords = [ collection.search.search_kw_link(k, d, { 'title': page.plural(c, 'occurrence')}) for k,c in keywords[:maxkw] ]
        
        '<div id="%s" class="day">\n' % (int_day.num_fmt(d))
        '<h3>\n'
        '  <a class="day-link" id="day:%(date)s" href="%(url)s">%(date)s</a>\n' % {
            'date': d.strftime(str('%Y-%m-%d')),
            'url': collection.calendar.path(int_day, d),
            }
        '  <span class="day-keywords">\n'
        '%(keywords)s%(ellip)s\n' % {
            'keywords': ',\n'.join([ '    ' + k for k in keywords ]),
            'ellip': ellip and '&hellip;' or '',
            }
        '  </span>\n'
        '</h3>\n' 
        '<div class="day-pics">\n'
        for p in pl:
            image.ImageDir(collection).view_rotate_link(request, p) + '\n'
        '</div>\n</div>\n'

def _q_index_ptl [html] (self, request):
    from calendarui import sorted_intervals, int_week, most_recent

    filter = dbfilters.mayViewFilter(self.collection.db, request.session.getuser())
    
    if self.date is None:
        self.date = self.interval.rounddown(most_recent(filter))

    days = self.build_calendar(self.date, self.interval, filter=filter)

    total = reduce(lambda a,b:a+b, [0,0]+[ p.count() for (d,p) in days ])

    page.pre(request, 'Calendar: %s - %s' % (self.interval.long_fmt(self.date),
                                             page.plural(total, 'picture')),
             'calendar', brieftitle='%s: %s' % (self.interval.name,
                                                self.interval.num_fmt(self.date)))

    nav = ''
    prev = db.Picture.select(AND(db.Picture.q.record_time < self.date, filter),
                             orderBy=db.Picture.q.record_time).reversed()
    if prev.count() > 0:
        prev = self.interval.rounddown(prev[0].record_time)
        request.navigation.set_prev(self.path(self.interval, prev))

    next = db.Picture.select(AND(db.Picture.q.record_time >= (self.date+self.interval.step), filter),
                             orderBy=db.Picture.q.record_time)
    if next.count() > 0:
        next = self.interval.rounddown(next[0].record_time)
        request.navigation.set_next(self.path(self.interval, next))

    page.menupane(request)

    '<h1>%s - %s</h1>' % (self.interval.long_fmt(self.date), page.plural(total, 'picture'))

    if days is None or len(days) == 0:
        page.error(request, 'No pictures in specified range', 'Please select another date range')

    for i in sorted_intervals:
        sel=''
        if i == self.interval:
            sel='selected'
        '<a class="%s" href="%s">%s</a>\n' % (sel, self.path(i, self.date),
                                              i.name.capitalize())

    picsbyday(request, days, self.collection)

    request.session.set_query_results([ p for d, piclist in days for p in piclist ])

    page.post()


def emitmonth [html](request, calui, year, m):
    from calendarui import int_month, int_day

    title = page.plural(m.total, 'picture')
    
    '\n<table class="month">\n'
    '  <thead>\n'
    '    <tr><td colspan="7"><a title="%s" href="%s">%s</a></td></tr>\n' % \
      (title, calui.path(int_month, mxdt.DateTime(year, m.month)), m.getname())
    '  </thead>\n'
    '  <tbody>\n'
    mc = m.getcalendar()

    if False:
        # If we're making a 6-row month, fold the last row into the first
        # User testing (ie, Rachel) says no
        if len(mc) == 6:
            mm=[]
            for m1,m2 in zip(mc[0], mc[5]):
                mm.append(m1 or m2)
            mc[0] = mm
            del mc[5]

    for week in mc:
        '    <tr>'
        for d in week:
            if d == 0:
                '<td></td>'
                continue
            mark =  m.ismarked(d)
            if mark != 0:
                title = page.plural(mark, 'picture')
                '<td class="mark"><a href="%s" title="%s">%d</a></td>' % \
                     (calui.path(int_day, mxdt.DateTime(year, m.month, d)), title, d)
            else:
                '<td>%d</td>' % d
        '</tr>\n'
    '  </tbody>\n'
    '</table>\n'

# Class of calendarui.Year
def formatyear [html] (self, request, year):
    from calendarui import pics_grouped, int_year, kw_summary

    filter = dbfilters.mayViewFilter(self.calui.collection.db, request.session.getuser())

    pics = pics_grouped(int_year, filter=filter)

    total = 0
    for d,c in pics:
        if d.year == self.year:
            total = c.count()

    total = page.plural(total, 'picture')

    page.pre(request, "Year %d: %s" % (self.year, total), 'calendar')

    r = TemplateIO(html=True)
    
    prev = None
    next = None

    for d,c in pics:
        if d.year < self.year:
            prev = d
        if next is None and d.year > self.year:
            next = d

        selected=''
        if d.year == self.year:
            selected='selected'

        title = page.plural(c.count(), 'picture')
        
        r += '  <a class="%s" title="%s" href="%s">%d</a>\n' % \
             (selected, title,
              self.calui.path(int_year, d), d.year)

    if prev is not None:
        request.navigation.set_prev(self.calui.path(int_year, prev))

    if next is not None:
        request.navigation.set_next(self.calui.path(int_year, next))

    page.menupane(request)

    '<h1>Year: %d - %s</h1>\n' % (self.year, total)

    '<div class="years">\n'

    r.getvalue()
    
    '</div>\n'
        
    '<table class="calendar-year">\n'

    ya = [ [ None ] * 3,
           [ None ] * 3,
           [ None ] * 3,
           [ None ] * 3 ]

    for m in year:
        mi = m.month - 1
        ya[mi / 3][mi % 3] = m

    for row in ya:
        '<tr>\n'
        for m in row:
            ' <td>'
            if m is not None:
                emitmonth(request, self.calui, self.year, m)
            '</td>\n'
        '</tr>\n'
        
    '</table>'

    page.post()
