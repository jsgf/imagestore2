# -*- python -*-

import mx.DateTime as mxdt

import quixote
from quixote.html import htmltext as H, TemplateIO

from sqlobject.sqlbuilder import AND

import imagestore
import imagestore.db as db
import imagestore.pages as page
import imagestore.dbfilters as dbfilters
import imagestore.image as image
import imagestore.auth as auth
import imagestore.ImageTransform as ImageTransform
import imagestore.style as style

def freqlist(list):
    " Take a list of items, and return a list of unique (item, count) tuples. "
    list.sort()
    item=None
    count=0

    ret=[]
    for i in list:
        if i != item:
            if item is not None and count:
                ret.append((item, count))
            item = i
            count = 0
        count += 1
    if item is not None and count:
        ret.append((item, count))

    ret.sort(lambda a,b: cmp(b[1],a[1]))

    return ret    

class CalendarUI:
    def __init__(self, calendar):
        self.calendar = calendar

    def _q_index [html] (self, date, interval, user):
        import imagestore.calendar as calendar
        request = quixote.get_request()
        
        if self.calendar.date is None:
            self.calendar.date = self.calendar.interval.rounddown(self.calendar.most_recent(user))

        days = self.calendar.build_calendar(self.calendar.date, self.calendar.interval, user)

        total = reduce(lambda a,b:a+b, [0,0]+[ p.count() for (d,p) in days ])

        page.pre(request, 'Calendar: %s - %s' % (self.calendar.interval.long_fmt(self.calendar.date),
                                                 page.plural(total, 'picture')),
                 'calendar', brieftitle='%s: %s' % (self.calendar.interval.name,
                                                    self.calendar.interval.num_fmt(self.calendar.date)))

        nav = ''
        filter = self.calendar.collection.db_filter(user)
        prev = db.Picture.select(AND(db.Picture.q.record_time < self.calendar.date, filter),
                                 orderBy=db.Picture.q.record_time).reversed()
        if prev.count() > 0:
            prev = self.calendar.interval.rounddown(prev[0].record_time)
            request.navigation.set_prev(self.calendar.path(self.calendar.interval, prev))

        next = db.Picture.select(AND(db.Picture.q.record_time >= (self.calendar.date+self.calendar.interval.step), filter),
                                 orderBy=db.Picture.q.record_time)
        if next.count() > 0:
            next = self.calendar.interval.rounddown(next[0].record_time)
            request.navigation.set_next(self.calendar.path(self.calendar.interval, next))

        page.menupane(request)

        '<h1>%s - %s</h1>' % (self.calendar.interval.long_fmt(self.calendar.date),
                              page.plural(total, 'picture'))

        if days is None or len(days) == 0:
            page.error(request, 'No pictures in specified range', 'Please select another date range')

        for i in calendar.sorted_intervals:
            sel=''
            if i == self.calendar.interval:
                sel='selected'
            '<a class="%s" href="%s">%s</a>\n' % (sel, self.calendar.path(i, self.calendar.date),
                                                  i.name.capitalize())

        self.picsbyday(days)

        request.session.set_query_results([ p for d, piclist in days for p in piclist ])

        page.post()

    def emitmonth [html](self, year, m):
        import imagestore.calendar as calendar
        title = page.plural(m.total, 'picture')

        '\n<table class="month">\n'
        '  <thead>\n'
        '    <tr><td colspan="7"><a title="%s" href="%s">%s</a></td></tr>\n' % \
          (title, self.calendar.path(calendar.int_month, mxdt.DateTime(year, m.month)), m.getname())
        '  </thead>\n'
        '  <tbody>\n'
        mc = m.getcalendar()

        if False:
            # If we're making a 6-row month, fold the last row into the first
            # User testing (ie, Rachel) says no
            if len(mc) == 6:
                mm=[]
                for m1,m2 in zip(mc[0], mc[5]):
                    mm.append(m1 or m2)
                mc[0] = mm
                del mc[5]

        for week in mc:
            '    <tr>'
            for d in week:
                if d == 0:
                    '<td></td>'
                    continue
                mark =  m.ismarked(d)
                if mark != 0:
                    title = page.plural(mark, 'picture')
                    '<td class="mark"><a href="%s" title="%s">%d</a></td>' % \
                         (self.calendar.path(calendar.int_day, mxdt.DateTime(year, m.month, d)), title, d)
                else:
                    '<td>%d</td>' % d
            '</tr>\n'
        '  </tbody>\n'
        '</table>\n'

    
    def picsbyday [html] (self, days):
        # Days is list of (date, piclist) tuples.  This routine displays
        # them grouped by day, along with a summary of the keywords used
        # for that day's pictures.
        import imagestore.calendar as calendar
        maxkw = 10

        collection = self.calendar.collection

        for d,pl in days:
            keywords = freqlist([ k.word for p in pl for k in p.keywords if k.word != 'unclassified' ])
            ellip = len(keywords) > maxkw
            keywords = [ collection.search.search_kw_link(k, d, { 'title': page.plural(c, 'occurrence')}) for k,c in keywords[:maxkw] ]

            '<div id="%s" class="day">\n' % (calendar.int_day.num_fmt(d))
            '<h3>\n'
            '  <a class="day-link" id="day:%(date)s" href="%(url)s">%(date)s</a>\n' % {
                'date': d.strftime(str('%Y-%m-%d')),
                'url': collection.calendar.path(calendar.int_day, d),
                }
            '  <span class="day-keywords">\n'
            '%(keywords)s%(ellip)s\n' % {
                'keywords': ',\n'.join([ '    ' + k for k in keywords ]),
                'ellip': ellip and '&hellip;' or '',
                }
            '  </span>\n'
            '</h3>\n' 
            '<ul class="day-pics thumb-set">\n'
            for p in pl:
                im = image.Image(collection, p)
                (w,h) = ImageTransform.transformed_size(p, imagestore.prefs.image_size)
                linkextra = {}
                if imagestore.prefs.view_new_window:
                    linkextra = {
                        'target': 'view:%d' % p.id,
                        'onClick': "create_view_window('view:%(id)d', %(portrait)d, %(padding)d, ['resizable=1', 'scrollbars=1', 'location=1', 'toolbar=1'])" % {
                        'id': p.id,
                        'padding': style.view_margin*2,
                        'portrait': p.orientation in (90, 270),
                        }
                        }
                    
                '<li>'+im.ui.thumbnail(wantedit=True, linkextra = linkextra)
            '</ul>\n'
            '</div>\n'


class YearUI:
    def __init__(self, year):
        self.year = year
        
    def formatyear [html] (self, year, user):
        import imagestore.calendar as calendar
        
        pics = self.year.calendar.pics_grouped(calendar.int_year, user=user)

        total = 0
        for d,c in pics:
            if d.year == self.year.year:
                total = c.count()

        total = page.plural(total, 'picture')

        page.pre(None, "Year %d: %s" % (self.year.year, total), 'calendar')

        r = TemplateIO(html=True)

        prev = None
        next = None

        for d,c in pics:
            if d.year < self.year.year:
                prev = d
            if next is None and d.year > self.year.year:
                next = d

            selected=''
            if d.year == self.year.year:
                selected='selected'

            title = page.plural(c.count(), 'picture')

            r += '  <a class="%s" title="%s" href="%s">%d</a>\n' % \
                 (selected, title,
                  self.year.calendar.path(calendar.int_year, d), d.year)

        if prev is not None:
            request.navigation.set_prev(self.calendar.path(calendar.int_year, prev))

        if next is not None:
            request.navigation.set_next(self.calendar.path(calendar.int_year, next))

        page.menupane(None)

        '<h1>Year: %d - %s</h1>\n' % (self.year.year, total)

        '<div class="years">\n'

        r.getvalue()

        '</div>\n'

        '<table class="calendar-year">\n'

        ya = [ [ None ] * 3,
               [ None ] * 3,
               [ None ] * 3,
               [ None ] * 3 ]

        for m in year:
            mi = m.month - 1
            ya[mi / 3][mi % 3] = m

        for row in ya:
            '<tr>\n'
            for m in row:
                ' <td>'
                if m is not None:
                    self.year.calendar.ui.emitmonth(self.year.year, m)
                '</td>\n'
            '</tr>\n'

        '</table>'

        page.post()
