# -*- python -*-

import random

from sqlobject.sqlbuilder import *

from quixote.util import Redirector
import quixote.form as form2

import imagestore.db as db
import imagestore.pages as page
import imagestore.dbfilters as dbfilters
import imagestore.image as image
import imagestore.form as form
import imagestore.calendarui

# Actually a method of CollectionUI
def _q_index [html] (self, request):
    filter = dbfilters.mayViewFilter(self.dbobj, request.session.getuser())

    npics = db.Picture.select(AND(filter, db.Picture.q.collectionID == self.dbobj.id)).count()

    # set we draw the sampler from
    pics = db.Picture.select(AND(filter,
                                 db.Picture.q.rating >= 0,
                                 STARTSWITH(db.Picture.q.mimetype, str('image/'))),
                             orderBy=db.Picture.q.record_time).reversed()[:400]
    count = pics.count()
    pics = list(pics)

    sampler=[]
    days=[]
    
    if count > 0:
        for i in range(min(count, 16)):
            while True:
                p = pics[random.randrange(0, count)]
                if p not in sampler:
                    break
            sampler.append(p)
            if calendarui.int_day.rounddown(p.record_time) not in days:
                days.append(calendarui.int_day.rounddown(p.record_time))

    
    page.pre(request, 'Collection %s: %d pictures' % (self.dbobj.name, npics),
             bodyid='collection', brieftitle='Collection: "%s"' % self.dbobj.name)

    extra=[]
    
    if days:
        extra.append(['Days', [ (calendarui.int_day.num_fmt(d), self.calendar.calendar_url(calendarui.int_day, d))
                                for d in days ] ])

    page.menupane(request)

    '<h1>%s: %d pictures</h1>\n' % (self.dbobj.description, npics)

    if sampler:
        '<div class="sampler">\n'

        imageui = image.ImageUI(self)

        for p in sampler:
            '<span class="image">\n'
            '<a href="%s">%s</a>\n' % ('%s#pic%d' % (self.calendar.calendar_url(calendarui.int_day, p.record_time), p.id),
                                       imageui.thumb_img(p, False))
            '</span>\n'

        '</div>'

        request.session.set_query_results(sampler)

    page.post()

def admin_page [html] (self, request):
    col = self.dbobj
    
    page.pre(request, '%s admin' % col.name, 'collection-admin')

    page.menupane(request)

    '<h1>Edit details for %s</h1>\n' % col.name

    props = form2.Form(name='collection-admin')

    props.add(form2.StringWidget, 'name', value=col.name, title='Collection name')
    props.add(form2.StringWidget, 'description', value=col.description, title='Collection name')
    props.add(form2.SingleSelectWidget, 'visibility', value=col.visibility,
             options=['public', 'private'])
    props.add(form2.CheckboxWidget, 'showOriginal', value=col.showOriginal,
             title='Allow anyone to download originals')

    props.add(form2.SingleSelectWidget, name='owner', value=col.ownerID, title='Owner',
              options=form.userOptList())

    nopics = (db.Picture.select(db.Picture.q.collectionID == col.id).count() == 0)

    props.add_submit('submit', 'Change collection settings')
    props.add_reset('Reset form')

    if nopics:
        props.add_submit('delete', 'Delete collection')

    if props.get_submit() == 'delete' and nopics:
        col.destroySelf()
        request.session.del_breadcrumb()
        Redirector(str('%s/user/') % prefix)
        return ''

    if not props.is_submitted() or props.has_errors():
        '<div class="title-box collection-admin">\n'
        '<h2>Collection properties</h2>\n'
        props.render()
        '</div>'
    else:
        if props['name'] != col.name and \
               db.Collection.select(db.Collection.q.name == props['name']).count() != 0:
            props.get_widget('name').set_error('name already taken')
        else:
            col.name = str(props['name'])
            col.description = str(props['description'])
            col.visibility = str(props['visibility'])
            col.showOriginal = str(props['showOriginal'])

            request.session.del_breadcrumb()
            Redirector(self.collection_admin_url())


    '<div class="title-box user-perms">\n'
    '<h2>Per-user permissions</h2>\n'
    users = db.CollectionPerms.select(db.CollectionPerms.q.collectionID == col.id,
                                      orderBy=db.CollectionPerms.q.userID)
    if users.count() != 0:
        '<table>\n'
        for up in users:
            u = db.User.get(up.userID)
            
            '<tr>\n'
            '<td>%d<td>' % u.id
            '<td><a href="%s/user/%s/">%s</a><td>' % (prefix, u.username, u.username)
            '<td>%s</td>' % (up.mayAdmin and 'admin' or '')
            '<td>%s</td>' % (up.mayViewall and 'viewall' or '')
            '<td>%s</td>' % (up.mayView and 'view' or '')
            '<td>%s</td>' % (up.mayViewRestricted and 'restricted' or '')
            '<td>%s</td>' % (up.mayUpload and 'upload' or '')
            '<td>%s</td>' % (up.mayComment and 'comment' or '')
            '<td>%s</td>' % (up.mayEdit and 'edit' or '')
            '<td>%s</td>' % (up.mayCurate and 'curate' or '')
            '</tr>\n'
        '</table>\n'
        
    '</div>\n'

    page.post()

        
