# -*- python -*-

from db import Collection
from sqlobject.sqlbuilder import OR
from types import *

from go_scgi import ImagestoreHandler
prefix = ImagestoreHandler.prefix

def pre [html] (request, title, bodyclass=''):
    """\
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 EN">
<head>
  <link type="text/css" rel="stylesheet" href="%(base)s/style.css">
  <title>%(title)s</title>
</head>
<body class="%(class)s">\n""" % {
      'title': title,
      'base': prefix,
      'class': bodyclass
      }

def post [html] ():
    "\n</body>\n</html>\n"

def html(request, title, page, bodyclass=''):
    return pre(request, title, bodyclass) + page + post()

def join_extra [html] (extra):
    return ' '.join([ '%s="%s"' % (k, extra[k]) for k in extra.keys() ])

def arrow [html] (dir, alt=None, extra={}):
    if alt is None:
        alt = dir + " arrow"

    '<img class="arrow %(dir)s-arrow" alt="%(alt)s" %(extra)s src="%(prefix)s/static/arrow-small-%(dir)s.png">' % {
        'extra': join_extra(extra),
        'alt': alt,
        'prefix': prefix,
        'dir': dir,
        }

def generate_extra [html] (extra):
    for e in extra:
        if type(e) == ListType:
            '<ul>\n'
            generate_extra(e)
            '</ul>\n'
        elif type(e) == TupleType:
            (text,url) = e
            '<li><a href="%s">%s</a>\n' % (url, text)
        elif type(e) == StringType or type(e) == type(htmltext('')):
            '<li class="subhead">' + e + '\n'

# Generate a menu pane.  extra is a list of items to add to the list;
# it's in the form of nested lists of tuples
def menupane [html] (request, extra=None, nav=None):
    '<div id="menu">\n'

    '<ul>\n'

    session = request.session
    user = session.getuser()
    
    if user is None:
        '<li class="login"><a href="%s/user/login">Log in</a>\n' % prefix
    else:
        '<li class="login">Logged in as <a href="%(prefix)s/user/%(user)s/">%(fullname)s</a>\n' % {
            'prefix': prefix,
            'user': user.username,
            'fullname': user.fullname }
        '<ul>\n'
        '<li><a href="%s/user/logout">log out</a>\n' % prefix
        '</ul>\n'
         
    '<li class="collections">Collections:\n'
    '  <ul>\n'

    q = [ Collection.q.visibility == str('public') ]
    if user is not None:
        q.append(Collection.q.ownerID == user.id)
        
    for c in Collection.select(OR(*q), orderBy=Collection.q.id):
        '    <li><a href="%(pre)s/%(c)s/">%(c)s</a>\n' % { 'pre': prefix, 'c': c.name }

    '  </ul>\n'

    if extra is not None:
        generate_extra(extra)
    
    '</ul>\n'

    if nav is not None:
        nav
        
    '</div>\n'

def error [html] (request, heading, body):
    '<div class="error">\n'
    '<span class="header">\n'
    heading
    '</span>\n'
    body
    '</div>\n'
