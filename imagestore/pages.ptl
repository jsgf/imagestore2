# -*- python -*-

import imagestore.base_paths as paths
import imagestore.auth as auth
from menu import Menu, SubMenu, Link, Heading

def plural(n, word):
    n=int(n)
    s=''
    if n != 1:
        s='s'
    return '%d %s%s' % (n, word, s)

def pre [html] (request, title, bodyid, trail=True, brieftitle=None):        
    if trail:
        request.session.add_breadcrumb(brieftitle or title,
                                       request.get_path(),
                                       brieftitle and title)
    """\
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN"
        "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
  <link type="text/css" rel="stylesheet" href="%(base)sstyle.css">
  <script type="text/javascript" src="%(static)sdojo.js"></script>
  <script type="text/javascript">base_path="%(base)s";</script>
  <script type="text/javascript" src="%(static)simagestore.js"></script>
  <title>%(title)s</title>
%(nav)s</head>
<body id="%(id)s" class="no-auth want-edit">\n""" % {
      'title': title,
      'base': paths.path(),
      'static': paths.static_path(),
      'id': bodyid,
      'nav': request.navigation.render_links(depth=1),
      }

def post [html] ():
    "\n</body>\n</html>\n"

def html(request, title, page, bodyid=''):
    return pre(request, title, bodyid) + page + post()

def _emit_attrib [html] (a,v):
    if v is None:
        a
    else:
        '%s="%s"' % (a,v)

def join_extra [html] (extra):
    return ' '.join([ _emit_attrib(a,v) for a,v in extra.items() ])

def arrow [html] (dir, alt=None, extra={}):
    if alt is None:
        alt = { 'up':   '&uarr;',
                'down': '&darr;',
                'left': '&larr;',
                'right':'&rarr;' }[dir]

    '<img class="arrow %(dir)s-arrow" alt="%(alt)s" %(extra)s src="%(static)sarrow-small-%(dir)s.png">' % {
        'extra': join_extra(extra),
        'alt': alt,
        'static': paths.static_path(),
        'dir': dir,
        }

def generate_extra [html] (extra, depth=0):
    pfx='  ' * depth
    for e in extra:
        if isinstance(e, list):
            pfx+'<ul>\n'
            generate_extra(e, depth+1)
            pfx+'</ul>\n'
        elif isinstance(e, tuple):
            (text,url) = e
            pfx+'<li><a href="%s">%s</a>\n' % (url, text)
        elif isinstance(e, str) or isinstance(e, htmltext):
            pfx+'<li class="subhead">' + e + '\n'

# Generate a menu pane.  extra is a list of items to add to the list;
# it's in the form of nested lists of tuples
def menupane [html] (request, extra=None):
    
    crumbs = request.session.breadcrumbs
    if crumbs:
        '\n<div id="breadcrumbs">\n'
        path = [ ' <a class="crumb" %s href="%s">%s</a>' % (desc and ('title="%s"' % desc) or '',
                                                           url, title)
                 for (title, url, desc) in crumbs ]
        '\n  <span class="divider">&rarr;</span>\n'.join(path)
        '\n</div>\n'
    
    # Login info

    sess_user = auth.login_user(quiet=True)

    menu = Menu()

    menu += [ Heading('Login', extra={ 'dojoType': 'Login' }) ]
        
    # Context menu
    menu += request.context_menu

    # Page-specific menu
    if extra:
        menu += extra

    '<div id="menu">\n'                 # DIV for whole menu pane

    request.navigation.render()

    menu.render(depth=1)
    
    '</div>\n'
        
def error [html] (request, heading, body):
    '<div class="error">\n'
    '<span class="header">\n'
    heading
    '</span>\n'
    body
    '</div>\n'
